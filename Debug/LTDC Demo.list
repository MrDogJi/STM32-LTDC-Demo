
LTDC Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001828  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080019d4  080019d4  000119d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080019f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00000078  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000088  20000088  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010f6c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000024db  00000000  00000000  00030fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002aa3  00000000  00000000  00033487  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000660  00000000  00000000  00035f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  00036590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003c46  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000029d0  00000000  00000000  0003a9c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003d396  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000106c  00000000  00000000  0003d414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080019bc 	.word	0x080019bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080019bc 	.word	0x080019bc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0x3c>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
{
 8000502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f0 	udiv	r3, r3, r0
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 f89c 	bl	8000650 <HAL_SYSTICK_Config>
 8000518:	4604      	mov	r4, r0
 800051a:	b958      	cbnz	r0, 8000534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	2d0f      	cmp	r5, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	4602      	mov	r2, r0
 8000522:	4629      	mov	r1, r5
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 f85e 	bl	80005e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x44>)
 800052e:	4620      	mov	r0, r4
 8000530:	601d      	str	r5, [r3, #0]
 8000532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000536:	bd38      	pop	{r3, r4, r5, pc}
 8000538:	2000000c 	.word	0x2000000c
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f82f 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f001 f984 	bl	8001878 <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000002c 	.word	0x2000002c
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf1c      	itt	ne
 80005a8:	4b05      	ldrne	r3, [pc, #20]	; (80005c0 <HAL_Delay+0x24>)
 80005aa:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf18      	it	ne
 80005b0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	f7ff ffed 	bl	8000590 <HAL_GetTick>
 80005b6:	1b40      	subs	r0, r0, r5
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d8fa      	bhi.n	80005b2 <HAL_Delay+0x16>
  {
  }
}
 80005bc:	bd38      	pop	{r3, r4, r5, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005d4:	0200      	lsls	r0, r0, #8
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	68dc      	ldr	r4, [r3, #12]
 80005ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	bf28      	it	cs
 80005fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 0501 	mov.w	r5, #1
 8000604:	fa05 f303 	lsl.w	r3, r5, r3
 8000608:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060c:	bf8c      	ite	hi
 800060e:	3c03      	subhi	r4, #3
 8000610:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000612:	4019      	ands	r1, r3
 8000614:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000616:	fa05 f404 	lsl.w	r4, r5, r4
 800061a:	3c01      	subs	r4, #1
 800061c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800061e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	ea42 0201 	orr.w	r2, r2, r1
 8000624:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfaf      	iteee	ge
 800062a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	f000 000f 	andlt.w	r0, r0, #15
 8000632:	4b06      	ldrlt	r3, [pc, #24]	; (800064c <HAL_NVIC_SetPriority+0x64>)
 8000634:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	bfa5      	ittet	ge
 8000638:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800063c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	e000ed14 	.word	0xe000ed14

08000650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000650:	3801      	subs	r0, #1
 8000652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000656:	d20a      	bcs.n	800066e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	21f0      	movs	r1, #240	; 0xf0
 8000660:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e010 	.word	0xe000e010
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000680:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000682:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000684:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800084c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000688:	4a6e      	ldr	r2, [pc, #440]	; (8000844 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800068a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000850 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000690:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000692:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000696:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000698:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006a0:	45b6      	cmp	lr, r6
 80006a2:	f040 80b6 	bne.w	8000812 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006a6:	684c      	ldr	r4, [r1, #4]
 80006a8:	f024 0710 	bic.w	r7, r4, #16
 80006ac:	2f02      	cmp	r7, #2
 80006ae:	d116      	bne.n	80006de <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006b0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006b4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006bc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006c4:	f04f 0c0f 	mov.w	ip, #15
 80006c8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006cc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006d0:	690d      	ldr	r5, [r1, #16]
 80006d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80006d6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006da:	f8ca 5020 	str.w	r5, [sl, #32]
 80006de:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006e4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006ec:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ee:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006f6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fa:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006fc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000700:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000702:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000706:	d811      	bhi.n	800072c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000708:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800070a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800070e:	68cf      	ldr	r7, [r1, #12]
 8000710:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000714:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000718:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800071a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800071c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000720:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000724:	409f      	lsls	r7, r3
 8000726:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800072a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800072c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000730:	688f      	ldr	r7, [r1, #8]
 8000732:	fa07 f70a 	lsl.w	r7, r7, sl
 8000736:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000738:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800073a:	00e5      	lsls	r5, r4, #3
 800073c:	d569      	bpl.n	8000812 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	f04f 0b00 	mov.w	fp, #0
 8000742:	f8cd b00c 	str.w	fp, [sp, #12]
 8000746:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074a:	4d3f      	ldr	r5, [pc, #252]	; (8000848 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000750:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000754:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000758:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800075c:	9703      	str	r7, [sp, #12]
 800075e:	9f03      	ldr	r7, [sp, #12]
 8000760:	f023 0703 	bic.w	r7, r3, #3
 8000764:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000768:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000770:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000774:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000778:	f04f 0e0f 	mov.w	lr, #15
 800077c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000780:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000782:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000786:	d04b      	beq.n	8000820 <HAL_GPIO_Init+0x1a4>
 8000788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078c:	42a8      	cmp	r0, r5
 800078e:	d049      	beq.n	8000824 <HAL_GPIO_Init+0x1a8>
 8000790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000794:	42a8      	cmp	r0, r5
 8000796:	d047      	beq.n	8000828 <HAL_GPIO_Init+0x1ac>
 8000798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079c:	42a8      	cmp	r0, r5
 800079e:	d045      	beq.n	800082c <HAL_GPIO_Init+0x1b0>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	d043      	beq.n	8000830 <HAL_GPIO_Init+0x1b4>
 80007a8:	4548      	cmp	r0, r9
 80007aa:	d043      	beq.n	8000834 <HAL_GPIO_Init+0x1b8>
 80007ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d041      	beq.n	8000838 <HAL_GPIO_Init+0x1bc>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d03f      	beq.n	800083c <HAL_GPIO_Init+0x1c0>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d03d      	beq.n	8000840 <HAL_GPIO_Init+0x1c4>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	bf14      	ite	ne
 80007cc:	250a      	movne	r5, #10
 80007ce:	2509      	moveq	r5, #9
 80007d0:	fa05 f50c 	lsl.w	r5, r5, ip
 80007d4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007d8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007da:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007dc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007de:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007e2:	bf0c      	ite	eq
 80007e4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007e6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007e8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007ea:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ec:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f0:	bf0c      	ite	eq
 80007f2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007f4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007f6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007f8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007fe:	bf0c      	ite	eq
 8000800:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000802:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000804:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000806:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000808:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800080a:	bf54      	ite	pl
 800080c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800080e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000810:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000812:	3301      	adds	r3, #1
 8000814:	2b10      	cmp	r3, #16
 8000816:	f47f af3c 	bne.w	8000692 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800081a:	b005      	add	sp, #20
 800081c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000820:	465d      	mov	r5, fp
 8000822:	e7d5      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000824:	2501      	movs	r5, #1
 8000826:	e7d3      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000828:	2502      	movs	r5, #2
 800082a:	e7d1      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 800082c:	2503      	movs	r5, #3
 800082e:	e7cf      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000830:	2504      	movs	r5, #4
 8000832:	e7cd      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000834:	2505      	movs	r5, #5
 8000836:	e7cb      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000838:	2506      	movs	r5, #6
 800083a:	e7c9      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 800083c:	2507      	movs	r5, #7
 800083e:	e7c7      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000840:	2508      	movs	r5, #8
 8000842:	e7c5      	b.n	80007d0 <HAL_GPIO_Init+0x154>
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40021400 	.word	0x40021400

08000854 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	b10a      	cbz	r2, 800085a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000856:	6181      	str	r1, [r0, #24]
 8000858:	4770      	bx	lr
 800085a:	0409      	lsls	r1, r1, #16
 800085c:	e7fb      	b.n	8000856 <HAL_GPIO_WritePin+0x2>
	...

08000860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000860:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000868:	4c18      	ldr	r4, [pc, #96]	; (80008cc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000870:	641a      	str	r2, [r3, #64]	; 0x40
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_PWREx_EnableOverDrive+0x70>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000882:	f7ff fe85 	bl	8000590 <HAL_GetTick>
 8000886:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000888:	6863      	ldr	r3, [r4, #4]
 800088a:	03da      	lsls	r2, r3, #15
 800088c:	d50b      	bpl.n	80008a6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000890:	4c0e      	ldr	r4, [pc, #56]	; (80008cc <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000896:	f7ff fe7b 	bl	8000590 <HAL_GetTick>
 800089a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800089c:	6863      	ldr	r3, [r4, #4]
 800089e:	039b      	lsls	r3, r3, #14
 80008a0:	d50a      	bpl.n	80008b8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008a2:	2000      	movs	r0, #0
 80008a4:	e006      	b.n	80008b4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008a6:	f7ff fe73 	bl	8000590 <HAL_GetTick>
 80008aa:	1b40      	subs	r0, r0, r5
 80008ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008b0:	d9ea      	bls.n	8000888 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008b2:	2003      	movs	r0, #3
}
 80008b4:	b003      	add	sp, #12
 80008b6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008b8:	f7ff fe6a 	bl	8000590 <HAL_GetTick>
 80008bc:	1b40      	subs	r0, r0, r5
 80008be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008c2:	d9eb      	bls.n	800089c <HAL_PWREx_EnableOverDrive+0x3c>
 80008c4:	e7f5      	b.n	80008b2 <HAL_PWREx_EnableOverDrive+0x52>
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000
 80008d0:	420e0040 	.word	0x420e0040
 80008d4:	420e0044 	.word	0x420e0044

080008d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008dc:	4604      	mov	r4, r0
 80008de:	b918      	cbnz	r0, 80008e8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008e0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008e2:	b002      	add	sp, #8
 80008e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e8:	6803      	ldr	r3, [r0, #0]
 80008ea:	07dd      	lsls	r5, r3, #31
 80008ec:	d410      	bmi.n	8000910 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	0798      	lsls	r0, r3, #30
 80008f2:	d458      	bmi.n	80009a6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	071a      	lsls	r2, r3, #28
 80008f8:	f100 809a 	bmi.w	8000a30 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	075b      	lsls	r3, r3, #29
 8000900:	f100 80b8 	bmi.w	8000a74 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000904:	69a2      	ldr	r2, [r4, #24]
 8000906:	2a00      	cmp	r2, #0
 8000908:	f040 8119 	bne.w	8000b3e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	e7e8      	b.n	80008e2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000910:	4ba6      	ldr	r3, [pc, #664]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	f002 020c 	and.w	r2, r2, #12
 8000918:	2a04      	cmp	r2, #4
 800091a:	d007      	beq.n	800092c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000922:	2a08      	cmp	r2, #8
 8000924:	d10a      	bne.n	800093c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	0259      	lsls	r1, r3, #9
 800092a:	d507      	bpl.n	800093c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800092c:	4b9f      	ldr	r3, [pc, #636]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	039a      	lsls	r2, r3, #14
 8000932:	d5dc      	bpl.n	80008ee <HAL_RCC_OscConfig+0x16>
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1d9      	bne.n	80008ee <HAL_RCC_OscConfig+0x16>
 800093a:	e7d1      	b.n	80008e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	4d9b      	ldr	r5, [pc, #620]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000944:	d111      	bne.n	800096a <HAL_RCC_OscConfig+0x92>
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094e:	f7ff fe1f 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	4d96      	ldr	r5, [pc, #600]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000954:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	039b      	lsls	r3, r3, #14
 800095a:	d4c8      	bmi.n	80008ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095c:	f7ff fe18 	bl	8000590 <HAL_GetTick>
 8000960:	1b80      	subs	r0, r0, r6
 8000962:	2864      	cmp	r0, #100	; 0x64
 8000964:	d9f7      	bls.n	8000956 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000966:	2003      	movs	r0, #3
 8000968:	e7bb      	b.n	80008e2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096e:	d104      	bne.n	800097a <HAL_RCC_OscConfig+0xa2>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	602b      	str	r3, [r5, #0]
 8000978:	e7e5      	b.n	8000946 <HAL_RCC_OscConfig+0x6e>
 800097a:	682a      	ldr	r2, [r5, #0]
 800097c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000980:	602a      	str	r2, [r5, #0]
 8000982:	682a      	ldr	r2, [r5, #0]
 8000984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000988:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1df      	bne.n	800094e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800098e:	f7ff fdff 	bl	8000590 <HAL_GetTick>
 8000992:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	039f      	lsls	r7, r3, #14
 8000998:	d5a9      	bpl.n	80008ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099a:	f7ff fdf9 	bl	8000590 <HAL_GetTick>
 800099e:	1b80      	subs	r0, r0, r6
 80009a0:	2864      	cmp	r0, #100	; 0x64
 80009a2:	d9f7      	bls.n	8000994 <HAL_RCC_OscConfig+0xbc>
 80009a4:	e7df      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a6:	4b81      	ldr	r3, [pc, #516]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	f012 0f0c 	tst.w	r2, #12
 80009ae:	d007      	beq.n	80009c0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b6:	2a08      	cmp	r2, #8
 80009b8:	d111      	bne.n	80009de <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	025e      	lsls	r6, r3, #9
 80009be:	d40e      	bmi.n	80009de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c0:	4b7a      	ldr	r3, [pc, #488]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	0795      	lsls	r5, r2, #30
 80009c6:	d502      	bpl.n	80009ce <HAL_RCC_OscConfig+0xf6>
 80009c8:	68e2      	ldr	r2, [r4, #12]
 80009ca:	2a01      	cmp	r2, #1
 80009cc:	d188      	bne.n	80008e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	6921      	ldr	r1, [r4, #16]
 80009d2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009dc:	e78a      	b.n	80008f4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009de:	68e2      	ldr	r2, [r4, #12]
 80009e0:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <HAL_RCC_OscConfig+0x2d8>)
 80009e2:	b1b2      	cbz	r2, 8000a12 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e8:	f7ff fdd2 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	4d6f      	ldr	r5, [pc, #444]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	0798      	lsls	r0, r3, #30
 80009f4:	d507      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	6922      	ldr	r2, [r4, #16]
 80009fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a02:	602b      	str	r3, [r5, #0]
 8000a04:	e776      	b.n	80008f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a06:	f7ff fdc3 	bl	8000590 <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9ef      	bls.n	80009f0 <HAL_RCC_OscConfig+0x118>
 8000a10:	e7a9      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fdbc 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	4d64      	ldr	r5, [pc, #400]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	0799      	lsls	r1, r3, #30
 8000a20:	f57f af68 	bpl.w	80008f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fdb4 	bl	8000590 <HAL_GetTick>
 8000a28:	1b80      	subs	r0, r0, r6
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9f6      	bls.n	8000a1c <HAL_RCC_OscConfig+0x144>
 8000a2e:	e79a      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a30:	6962      	ldr	r2, [r4, #20]
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <HAL_RCC_OscConfig+0x2dc>)
 8000a34:	b17a      	cbz	r2, 8000a56 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a3a:	f7ff fda9 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	4d5b      	ldr	r5, [pc, #364]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a40:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a44:	079f      	lsls	r7, r3, #30
 8000a46:	f53f af59 	bmi.w	80008fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a4a:	f7ff fda1 	bl	8000590 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	2802      	cmp	r0, #2
 8000a52:	d9f6      	bls.n	8000a42 <HAL_RCC_OscConfig+0x16a>
 8000a54:	e787      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a56:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd9a 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	4d53      	ldr	r5, [pc, #332]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a60:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a62:	0798      	lsls	r0, r3, #30
 8000a64:	f57f af4a 	bpl.w	80008fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fd92 	bl	8000590 <HAL_GetTick>
 8000a6c:	1b80      	subs	r0, r0, r6
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f6      	bls.n	8000a60 <HAL_RCC_OscConfig+0x188>
 8000a72:	e778      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a7c:	d128      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a92:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a94:	4d48      	ldr	r5, [pc, #288]	; (8000bb8 <HAL_RCC_OscConfig+0x2e0>)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	05d9      	lsls	r1, r3, #23
 8000a9a:	d51b      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	68a3      	ldr	r3, [r4, #8]
 8000a9e:	4d43      	ldr	r5, [pc, #268]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d127      	bne.n	8000af4 <HAL_RCC_OscConfig+0x21c>
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aac:	f7ff fd70 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab0:	4d3e      	ldr	r5, [pc, #248]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ab2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aba:	079b      	lsls	r3, r3, #30
 8000abc:	d539      	bpl.n	8000b32 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	f43f af20 	beq.w	8000904 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac4:	4a39      	ldr	r2, [pc, #228]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000ac6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	e719      	b.n	8000904 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e7df      	b.n	8000a94 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000adc:	f7ff fd58 	bl	8000590 <HAL_GetTick>
 8000ae0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	05da      	lsls	r2, r3, #23
 8000ae6:	d4d9      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae8:	f7ff fd52 	bl	8000590 <HAL_GetTick>
 8000aec:	1bc0      	subs	r0, r0, r7
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9f7      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x20a>
 8000af2:	e738      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d104      	bne.n	8000b02 <HAL_RCC_OscConfig+0x22a>
 8000af8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	672b      	str	r3, [r5, #112]	; 0x70
 8000b00:	e7d0      	b.n	8000aa4 <HAL_RCC_OscConfig+0x1cc>
 8000b02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	672a      	str	r2, [r5, #112]	; 0x70
 8000b0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b0c:	f022 0204 	bic.w	r2, r2, #4
 8000b10:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1ca      	bne.n	8000aac <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b16:	f7ff fd3b 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b22:	0798      	lsls	r0, r3, #30
 8000b24:	d5cb      	bpl.n	8000abe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fd33 	bl	8000590 <HAL_GetTick>
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4540      	cmp	r0, r8
 8000b2e:	d9f7      	bls.n	8000b20 <HAL_RCC_OscConfig+0x248>
 8000b30:	e719      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd2d 	bl	8000590 <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4540      	cmp	r0, r8
 8000b3a:	d9bd      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x1e0>
 8000b3c:	e713      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3e:	4d1b      	ldr	r5, [pc, #108]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000b40:	68ab      	ldr	r3, [r5, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	f43f aeca 	beq.w	80008e0 <HAL_RCC_OscConfig+0x8>
 8000b4c:	4e1b      	ldr	r6, [pc, #108]	; (8000bbc <HAL_RCC_OscConfig+0x2e4>)
 8000b4e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b50:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b52:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b54:	d134      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b56:	f7ff fd1b 	bl	8000590 <HAL_GetTick>
 8000b5a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	0199      	lsls	r1, r3, #6
 8000b60:	d41e      	bmi.n	8000ba0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b62:	6a22      	ldr	r2, [r4, #32]
 8000b64:	69e3      	ldr	r3, [r4, #28]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b6a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b76:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b78:	0852      	lsrs	r2, r2, #1
 8000b7a:	3a01      	subs	r2, #1
 8000b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b82:	2301      	movs	r3, #1
 8000b84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b86:	f7ff fd03 	bl	8000590 <HAL_GetTick>
 8000b8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	019a      	lsls	r2, r3, #6
 8000b90:	f53f aebc 	bmi.w	800090c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b94:	f7ff fcfc 	bl	8000590 <HAL_GetTick>
 8000b98:	1b40      	subs	r0, r0, r5
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x2b4>
 8000b9e:	e6e2      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba0:	f7ff fcf6 	bl	8000590 <HAL_GetTick>
 8000ba4:	1bc0      	subs	r0, r0, r7
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9d8      	bls.n	8000b5c <HAL_RCC_OscConfig+0x284>
 8000baa:	e6dc      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	42470000 	.word	0x42470000
 8000bb4:	42470e80 	.word	0x42470e80
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fce6 	bl	8000590 <HAL_GetTick>
 8000bc4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	f57f ae9f 	bpl.w	800090c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fcdf 	bl	8000590 <HAL_GetTick>
 8000bd2:	1b00      	subs	r0, r0, r4
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f6      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2ee>
 8000bd8:	e6c5      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
 8000bda:	bf00      	nop

08000bdc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bde:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be0:	688b      	ldr	r3, [r1, #8]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d003      	beq.n	8000bf2 <HAL_RCC_GetSysClockFreq+0x16>
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d003      	beq.n	8000bf6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bf0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bf4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bfc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c00:	bf14      	ite	ne
 8000c02:	480c      	ldrne	r0, [pc, #48]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c04:	480a      	ldreq	r0, [pc, #40]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c06:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c0a:	bf18      	it	ne
 8000c0c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c12:	fba1 0100 	umull	r0, r1, r1, r0
 8000c16:	f7ff fae9 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c22:	3301      	adds	r3, #1
 8000c24:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c2a:	bd08      	pop	{r3, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	017d7840 	.word	0x017d7840

08000c38 <HAL_RCC_ClockConfig>:
{
 8000c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c3e:	4604      	mov	r4, r0
 8000c40:	b910      	cbnz	r0, 8000c48 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c42:	2001      	movs	r0, #1
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <HAL_RCC_ClockConfig+0x124>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f002 020f 	and.w	r2, r2, #15
 8000c50:	428a      	cmp	r2, r1
 8000c52:	d328      	bcc.n	8000ca6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c54:	6821      	ldr	r1, [r4, #0]
 8000c56:	078f      	lsls	r7, r1, #30
 8000c58:	d42d      	bmi.n	8000cb6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5a:	07c8      	lsls	r0, r1, #31
 8000c5c:	d440      	bmi.n	8000ce0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_RCC_ClockConfig+0x124>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f002 020f 	and.w	r2, r2, #15
 8000c66:	4295      	cmp	r5, r2
 8000c68:	d366      	bcc.n	8000d38 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c6a:	6822      	ldr	r2, [r4, #0]
 8000c6c:	0751      	lsls	r1, r2, #29
 8000c6e:	d46c      	bmi.n	8000d4a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c70:	0713      	lsls	r3, r2, #28
 8000c72:	d507      	bpl.n	8000c84 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000c76:	6921      	ldr	r1, [r4, #16]
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c84:	f7ff ffaa 	bl	8000bdc <HAL_RCC_GetSysClockFreq>
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000c8a:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <HAL_RCC_ClockConfig+0x12c>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	40d8      	lsrs	r0, r3
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_RCC_ClockConfig+0x130>)
 8000c98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fc2e 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d1c6      	bne.n	8000c42 <HAL_RCC_ClockConfig+0xa>
 8000cb4:	e7ce      	b.n	8000c54 <HAL_RCC_ClockConfig+0x1c>
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	689a      	ldrne	r2, [r3, #8]
 8000cc0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cc4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc8:	bf42      	ittt	mi
 8000cca:	689a      	ldrmi	r2, [r3, #8]
 8000ccc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cd0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	68a0      	ldr	r0, [r4, #8]
 8000cd6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cda:	4302      	orrs	r2, r0
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	e7bc      	b.n	8000c5a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce0:	6862      	ldr	r2, [r4, #4]
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d11d      	bne.n	8000d24 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	d0a8      	beq.n	8000c42 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf0:	4e1b      	ldr	r6, [pc, #108]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000cf2:	68b3      	ldr	r3, [r6, #8]
 8000cf4:	f023 0303 	bic.w	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cfc:	f7ff fc48 	bl	8000590 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d00:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d04:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d06:	68b3      	ldr	r3, [r6, #8]
 8000d08:	6862      	ldr	r2, [r4, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d12:	d0a4      	beq.n	8000c5e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fc3c 	bl	8000590 <HAL_GetTick>
 8000d18:	1bc0      	subs	r0, r0, r7
 8000d1a:	4540      	cmp	r0, r8
 8000d1c:	d9f3      	bls.n	8000d06 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
}
 8000d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d24:	1e91      	subs	r1, r2, #2
 8000d26:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d28:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d2a:	d802      	bhi.n	8000d32 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d30:	e7dd      	b.n	8000cee <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	f013 0f02 	tst.w	r3, #2
 8000d36:	e7da      	b.n	8000cee <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d38:	b2ea      	uxtb	r2, r5
 8000d3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	429d      	cmp	r5, r3
 8000d44:	f47f af7d 	bne.w	8000c42 <HAL_RCC_ClockConfig+0xa>
 8000d48:	e78f      	b.n	8000c6a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000d4c:	68e0      	ldr	r0, [r4, #12]
 8000d4e:	688b      	ldr	r3, [r1, #8]
 8000d50:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d54:	4303      	orrs	r3, r0
 8000d56:	608b      	str	r3, [r1, #8]
 8000d58:	e78a      	b.n	8000c70 <HAL_RCC_ClockConfig+0x38>
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00
 8000d60:	40023800 	.word	0x40023800
 8000d64:	080019d4 	.word	0x080019d4
 8000d68:	2000000c 	.word	0x2000000c

08000d6c <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000d6c:	6803      	ldr	r3, [r0, #0]
{
 8000d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000d70:	079a      	lsls	r2, r3, #30
{
 8000d72:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000d74:	f040 8088 	bne.w	8000e88 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	f013 0f0c 	tst.w	r3, #12
 8000d7e:	d044      	beq.n	8000e0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8000d80:	4d80      	ldr	r5, [pc, #512]	; (8000f84 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000d82:	4e81      	ldr	r6, [pc, #516]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000d88:	f7ff fc02 	bl	8000590 <HAL_GetTick>
 8000d8c:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000d8e:	6833      	ldr	r3, [r6, #0]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	f100 80bd 	bmi.w	8000f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8000d96:	6821      	ldr	r1, [r4, #0]
 8000d98:	074f      	lsls	r7, r1, #29
 8000d9a:	d515      	bpl.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8000d9c:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8000d9e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8000da2:	6920      	ldr	r0, [r4, #16]
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8000daa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000dae:	4313      	orrs	r3, r2
 8000db0:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8000db4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8000db8:	6a22      	ldr	r2, [r4, #32]
 8000dba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000dc4:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8000dc8:	070e      	lsls	r6, r1, #28
 8000dca:	d514      	bpl.n	8000df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000dcc:	4a6e      	ldr	r2, [pc, #440]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8000dce:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000dd0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8000dd4:	6920      	ldr	r0, [r4, #16]
 8000dd6:	071b      	lsls	r3, r3, #28
 8000dd8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8000ddc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000de0:	430b      	orrs	r3, r1
 8000de2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8000de6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000dea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000dec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000df0:	430b      	orrs	r3, r1
 8000df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8000df6:	2301      	movs	r3, #1
 8000df8:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8000dfa:	f7ff fbc9 	bl	8000590 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000dfe:	4d62      	ldr	r5, [pc, #392]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8000e00:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000e02:	682b      	ldr	r3, [r5, #0]
 8000e04:	0098      	lsls	r0, r3, #2
 8000e06:	f140 808a 	bpl.w	8000f1e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	069a      	lsls	r2, r3, #26
 8000e0e:	d531      	bpl.n	8000e74 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	4b5c      	ldr	r3, [pc, #368]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e16:	4d5d      	ldr	r5, [pc, #372]	; (8000f8c <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000e2a:	682b      	ldr	r3, [r5, #0]
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e32:	f7ff fbad 	bl	8000590 <HAL_GetTick>
 8000e36:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	05d9      	lsls	r1, r3, #23
 8000e3c:	d576      	bpl.n	8000f2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e3e:	4d52      	ldr	r5, [pc, #328]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8000e40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e42:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e46:	d177      	bne.n	8000f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e4a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000e4e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000e52:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8000e54:	f040 8091 	bne.w	8000f7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8000e58:	6891      	ldr	r1, [r2, #8]
 8000e5a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000e5e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000e62:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000e66:	4301      	orrs	r1, r0
 8000e68:	6091      	str	r1, [r2, #8]
 8000e6a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e70:	430b      	orrs	r3, r1
 8000e72:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000e74:	6820      	ldr	r0, [r4, #0]
 8000e76:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000e7a:	bf1f      	itttt	ne
 8000e7c:	4b44      	ldrne	r3, [pc, #272]	; (8000f90 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8000e7e:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8000e82:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8000e84:	2000      	movne	r0, #0
 8000e86:	e041      	b.n	8000f0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8000e88:	4d42      	ldr	r5, [pc, #264]	; (8000f94 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000e8a:	4e3f      	ldr	r6, [pc, #252]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000e90:	f7ff fb7e 	bl	8000590 <HAL_GetTick>
 8000e94:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000e96:	6833      	ldr	r3, [r6, #0]
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	d431      	bmi.n	8000f00 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000e9c:	6822      	ldr	r2, [r4, #0]
 8000e9e:	07d7      	lsls	r7, r2, #31
 8000ea0:	d506      	bpl.n	8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8000ea2:	68a3      	ldr	r3, [r4, #8]
 8000ea4:	6861      	ldr	r1, [r4, #4]
 8000ea6:	071b      	lsls	r3, r3, #28
 8000ea8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000eac:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8000eb0:	0790      	lsls	r0, r2, #30
 8000eb2:	d515      	bpl.n	8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000eb4:	4a34      	ldr	r2, [pc, #208]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8000eb6:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000eb8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8000ebc:	6860      	ldr	r0, [r4, #4]
 8000ebe:	061b      	lsls	r3, r3, #24
 8000ec0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8000ec4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8000ece:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000ed2:	69e3      	ldr	r3, [r4, #28]
 8000ed4:	f021 011f 	bic.w	r1, r1, #31
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	430b      	orrs	r3, r1
 8000edc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000ee4:	f7ff fb54 	bl	8000590 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000ee8:	4d27      	ldr	r5, [pc, #156]	; (8000f88 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8000eea:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	0119      	lsls	r1, r3, #4
 8000ef0:	f53f af42 	bmi.w	8000d78 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000ef4:	f7ff fb4c 	bl	8000590 <HAL_GetTick>
 8000ef8:	1b80      	subs	r0, r0, r6
 8000efa:	2802      	cmp	r0, #2
 8000efc:	d9f6      	bls.n	8000eec <HAL_RCCEx_PeriphCLKConfig+0x180>
 8000efe:	e004      	b.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000f00:	f7ff fb46 	bl	8000590 <HAL_GetTick>
 8000f04:	1bc0      	subs	r0, r0, r7
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9c5      	bls.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
}
 8000f0c:	b003      	add	sp, #12
 8000f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000f10:	f7ff fb3e 	bl	8000590 <HAL_GetTick>
 8000f14:	1bc0      	subs	r0, r0, r7
 8000f16:	2802      	cmp	r0, #2
 8000f18:	f67f af39 	bls.w	8000d8e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8000f1c:	e7f5      	b.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000f1e:	f7ff fb37 	bl	8000590 <HAL_GetTick>
 8000f22:	1b80      	subs	r0, r0, r6
 8000f24:	2802      	cmp	r0, #2
 8000f26:	f67f af6c 	bls.w	8000e02 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8000f2a:	e7ee      	b.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f2c:	f7ff fb30 	bl	8000590 <HAL_GetTick>
 8000f30:	1b80      	subs	r0, r0, r6
 8000f32:	2802      	cmp	r0, #2
 8000f34:	d980      	bls.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8000f36:	e7e8      	b.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d082      	beq.n	8000e48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000f52:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000f54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f56:	07da      	lsls	r2, r3, #31
 8000f58:	f57f af76 	bpl.w	8000e48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fb18 	bl	8000590 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f60:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000f64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f66:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f68:	079b      	lsls	r3, r3, #30
 8000f6a:	f53f af6d 	bmi.w	8000e48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb0f 	bl	8000590 <HAL_GetTick>
 8000f72:	1b80      	subs	r0, r0, r6
 8000f74:	42b8      	cmp	r0, r7
 8000f76:	d9f6      	bls.n	8000f66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8000f78:	e7c7      	b.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f7a:	6891      	ldr	r1, [r2, #8]
 8000f7c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000f80:	e772      	b.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8000f82:	bf00      	nop
 8000f84:	42470070 	.word	0x42470070
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	424711e0 	.word	0x424711e0
 8000f94:	42470068 	.word	0x42470068
 8000f98:	42470e40 	.word	0x42470e40

08000f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa0:	9e06      	ldr	r6, [sp, #24]
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4688      	mov	r8, r1
 8000fa6:	4617      	mov	r7, r2
 8000fa8:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000faa:	6822      	ldr	r2, [r4, #0]
 8000fac:	6893      	ldr	r3, [r2, #8]
 8000fae:	ea38 0303 	bics.w	r3, r8, r3
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	429f      	cmp	r7, r3
 8000fba:	d102      	bne.n	8000fc2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000fbc:	2000      	movs	r0, #0
}
 8000fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000fc2:	1c6b      	adds	r3, r5, #1
 8000fc4:	d0f2      	beq.n	8000fac <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000fc6:	bb55      	cbnz	r5, 800101e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000fd0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000fd2:	6862      	ldr	r2, [r4, #4]
 8000fd4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000fd8:	d10a      	bne.n	8000ff0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000fda:	68a2      	ldr	r2, [r4, #8]
 8000fdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000fe0:	d002      	beq.n	8000fe8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000fe2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000fe6:	d103      	bne.n	8000ff0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fee:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ff0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ff2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ff6:	d109      	bne.n	800100c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ffe:	0412      	lsls	r2, r2, #16
 8001000:	0c12      	lsrs	r2, r2, #16
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800100a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 800100c:	2301      	movs	r3, #1
 800100e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001012:	2300      	movs	r3, #0
 8001014:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001018:	2003      	movs	r0, #3
 800101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800101e:	f7ff fab7 	bl	8000590 <HAL_GetTick>
 8001022:	1b80      	subs	r0, r0, r6
 8001024:	4285      	cmp	r5, r0
 8001026:	d8c0      	bhi.n	8000faa <SPI_WaitFlagStateUntilTimeout+0xe>
 8001028:	e7ce      	b.n	8000fc8 <SPI_WaitFlagStateUntilTimeout+0x2c>

0800102a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800102a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800102c:	460b      	mov	r3, r1
 800102e:	9200      	str	r2, [sp, #0]
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	2200      	movs	r2, #0
{
 8001034:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001036:	f7ff ffb1 	bl	8000f9c <SPI_WaitFlagStateUntilTimeout>
 800103a:	b120      	cbz	r0, 8001046 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800103c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800103e:	f043 0320 	orr.w	r3, r3, #32
 8001042:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001044:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001046:	b002      	add	sp, #8
 8001048:	bd10      	pop	{r4, pc}

0800104a <HAL_SPI_Init>:
{
 800104a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800104c:	4604      	mov	r4, r0
 800104e:	2800      	cmp	r0, #0
 8001050:	d036      	beq.n	80010c0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001056:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800105a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800105e:	b91b      	cbnz	r3, 8001068 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001060:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001064:	f000 fbd2 	bl	800180c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001068:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800106a:	68a0      	ldr	r0, [r4, #8]
 800106c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001074:	680b      	ldr	r3, [r1, #0]
 8001076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800107a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800107c:	6863      	ldr	r3, [r4, #4]
 800107e:	4303      	orrs	r3, r0
 8001080:	68e0      	ldr	r0, [r4, #12]
 8001082:	4303      	orrs	r3, r0
 8001084:	6920      	ldr	r0, [r4, #16]
 8001086:	4303      	orrs	r3, r0
 8001088:	6960      	ldr	r0, [r4, #20]
 800108a:	4303      	orrs	r3, r0
 800108c:	69e0      	ldr	r0, [r4, #28]
 800108e:	4303      	orrs	r3, r0
 8001090:	6a20      	ldr	r0, [r4, #32]
 8001092:	4303      	orrs	r3, r0
 8001094:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001096:	4303      	orrs	r3, r0
 8001098:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800109c:	4303      	orrs	r3, r0
 800109e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80010a0:	0c12      	lsrs	r2, r2, #16
 80010a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010a4:	f002 0204 	and.w	r2, r2, #4
 80010a8:	431a      	orrs	r2, r3
 80010aa:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010ac:	69cb      	ldr	r3, [r1, #28]
 80010ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010b2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010b4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80010b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80010ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80010be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
}
 80010c2:	bd10      	pop	{r4, pc}

080010c4 <HAL_SPI_Transmit>:
{
 80010c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80010c8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80010ca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80010ce:	2b01      	cmp	r3, #1
{
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80010d6:	f000 809c 	beq.w	8001212 <HAL_SPI_Transmit+0x14e>
 80010da:	2301      	movs	r3, #1
 80010dc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80010e0:	f7ff fa56 	bl	8000590 <HAL_GetTick>
 80010e4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80010e6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80010ea:	b2c0      	uxtb	r0, r0
 80010ec:	2801      	cmp	r0, #1
 80010ee:	f040 808e 	bne.w	800120e <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d04e      	beq.n	8001194 <HAL_SPI_Transmit+0xd0>
 80010f6:	f1b8 0f00 	cmp.w	r8, #0
 80010fa:	d04b      	beq.n	8001194 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001106:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001108:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 800110c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800110e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001110:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001112:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001114:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001116:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800111c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800111e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001122:	bf02      	ittt	eq
 8001124:	681a      	ldreq	r2, [r3, #0]
 8001126:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800112a:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001130:	bf5e      	ittt	pl
 8001132:	681a      	ldrpl	r2, [r3, #0]
 8001134:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001138:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800113a:	68e2      	ldr	r2, [r4, #12]
 800113c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001140:	6862      	ldr	r2, [r4, #4]
 8001142:	d138      	bne.n	80011b6 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001144:	b11a      	cbz	r2, 800114e <HAL_SPI_Transmit+0x8a>
 8001146:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001148:	b292      	uxth	r2, r2
 800114a:	2a01      	cmp	r2, #1
 800114c:	d106      	bne.n	800115c <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 800114e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001152:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001154:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001156:	3b01      	subs	r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800115c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800115e:	b29b      	uxth	r3, r3
 8001160:	b993      	cbnz	r3, 8001188 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001162:	9700      	str	r7, [sp, #0]
 8001164:	4633      	mov	r3, r6
 8001166:	2201      	movs	r2, #1
 8001168:	2102      	movs	r1, #2
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff ff16 	bl	8000f9c <SPI_WaitFlagStateUntilTimeout>
 8001170:	b978      	cbnz	r0, 8001192 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001172:	463a      	mov	r2, r7
 8001174:	4631      	mov	r1, r6
 8001176:	4620      	mov	r0, r4
 8001178:	f7ff ff57 	bl	800102a <SPI_CheckFlag_BSY>
 800117c:	2800      	cmp	r0, #0
 800117e:	d038      	beq.n	80011f2 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001180:	2320      	movs	r3, #32
 8001182:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001184:	2001      	movs	r0, #1
    goto error;
 8001186:	e005      	b.n	8001194 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	0790      	lsls	r0, r2, #30
 800118e:	d4de      	bmi.n	800114e <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001190:	b94e      	cbnz	r6, 80011a6 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001192:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001194:	2301      	movs	r3, #1
 8001196:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800119a:	2300      	movs	r3, #0
 800119c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80011a0:	b004      	add	sp, #16
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80011a6:	1c71      	adds	r1, r6, #1
 80011a8:	d0d8      	beq.n	800115c <HAL_SPI_Transmit+0x98>
 80011aa:	f7ff f9f1 	bl	8000590 <HAL_GetTick>
 80011ae:	1bc0      	subs	r0, r0, r7
 80011b0:	4286      	cmp	r6, r0
 80011b2:	d8d3      	bhi.n	800115c <HAL_SPI_Transmit+0x98>
 80011b4:	e7ed      	b.n	8001192 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80011b6:	b11a      	cbz	r2, 80011c0 <HAL_SPI_Transmit+0xfc>
 80011b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80011ba:	b292      	uxth	r2, r2
 80011bc:	2a01      	cmp	r2, #1
 80011be:	d106      	bne.n	80011ce <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80011c0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80011c4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80011c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80011ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0c5      	beq.n	8001162 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	0792      	lsls	r2, r2, #30
 80011dc:	d4f0      	bmi.n	80011c0 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d0d7      	beq.n	8001192 <HAL_SPI_Transmit+0xce>
 80011e2:	1c73      	adds	r3, r6, #1
 80011e4:	d0f3      	beq.n	80011ce <HAL_SPI_Transmit+0x10a>
 80011e6:	f7ff f9d3 	bl	8000590 <HAL_GetTick>
 80011ea:	1bc0      	subs	r0, r0, r7
 80011ec:	4286      	cmp	r6, r0
 80011ee:	d8ee      	bhi.n	80011ce <HAL_SPI_Transmit+0x10a>
 80011f0:	e7cf      	b.n	8001192 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011f2:	68a3      	ldr	r3, [r4, #8]
 80011f4:	b933      	cbnz	r3, 8001204 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011f6:	9303      	str	r3, [sp, #12]
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	9203      	str	r2, [sp, #12]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	9303      	str	r3, [sp, #12]
 8001202:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001204:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001206:	3000      	adds	r0, #0
 8001208:	bf18      	it	ne
 800120a:	2001      	movne	r0, #1
 800120c:	e7c2      	b.n	8001194 <HAL_SPI_Transmit+0xd0>
 800120e:	2002      	movs	r0, #2
 8001210:	e7c0      	b.n	8001194 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001212:	2002      	movs	r0, #2
 8001214:	e7c4      	b.n	80011a0 <HAL_SPI_Transmit+0xdc>
	...

08001218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001218:	b086      	sub	sp, #24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_GPIO_Init+0x84>)
 800121c:	2200      	movs	r2, #0
 800121e:	9200      	str	r2, [sp, #0]
 8001220:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001222:	f041 0120 	orr.w	r1, r1, #32
 8001226:	6319      	str	r1, [r3, #48]	; 0x30
 8001228:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800122a:	f001 0120 	and.w	r1, r1, #32
 800122e:	9100      	str	r1, [sp, #0]
 8001230:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	9201      	str	r2, [sp, #4]
 8001234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001236:	f041 0101 	orr.w	r1, r1, #1
 800123a:	6319      	str	r1, [r3, #48]	; 0x30
 800123c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800123e:	f001 0101 	and.w	r1, r1, #1
 8001242:	9101      	str	r1, [sp, #4]
 8001244:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	9202      	str	r2, [sp, #8]
 8001248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800124a:	f041 0102 	orr.w	r1, r1, #2
 800124e:	6319      	str	r1, [r3, #48]	; 0x30
 8001250:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001252:	f001 0102 	and.w	r1, r1, #2
 8001256:	9102      	str	r1, [sp, #8]
 8001258:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125a:	9203      	str	r2, [sp, #12]
 800125c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800125e:	f041 0110 	orr.w	r1, r1, #16
 8001262:	6319      	str	r1, [r3, #48]	; 0x30
 8001264:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001266:	f001 0110 	and.w	r1, r1, #16
 800126a:	9103      	str	r1, [sp, #12]
 800126c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	9204      	str	r2, [sp, #16]
 8001270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001272:	f041 0108 	orr.w	r1, r1, #8
 8001276:	6319      	str	r1, [r3, #48]	; 0x30
 8001278:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800127a:	f001 0108 	and.w	r1, r1, #8
 800127e:	9104      	str	r1, [sp, #16]
 8001280:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	9205      	str	r2, [sp, #20]
 8001284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001286:	f042 0204 	orr.w	r2, r2, #4
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	9305      	str	r3, [sp, #20]
 8001294:	9b05      	ldr	r3, [sp, #20]

}
 8001296:	b006      	add	sp, #24
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <LCD_SetDrawAddr>:

extern uint8_t *GRAM;

uint16_t COLOR = 0x5566;

void LCD_SetDrawAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	4607      	mov	r7, r0
	// Set Column Address
	LCD_WriteCommand(0x2A);
 80012a4:	202a      	movs	r0, #42	; 0x2a
void LCD_SetDrawAddr(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80012a6:	460d      	mov	r5, r1
 80012a8:	4616      	mov	r6, r2
 80012aa:	461c      	mov	r4, r3
	LCD_WriteCommand(0x2A);
 80012ac:	f000 f88e 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData( (x0 >> 8) & 0xFF);
 80012b0:	0a38      	lsrs	r0, r7, #8
 80012b2:	f000 f8b3 	bl	800141c <LCD_WriteData>
	LCD_WriteData( x0 & 0xFF);
 80012b6:	b2f8      	uxtb	r0, r7
 80012b8:	f000 f8b0 	bl	800141c <LCD_WriteData>
	LCD_WriteData((x1 >> 8) & 0xFF);
 80012bc:	0a30      	lsrs	r0, r6, #8
 80012be:	f000 f8ad 	bl	800141c <LCD_WriteData>
	LCD_WriteData(x1 & 0xFF);
 80012c2:	b2f0      	uxtb	r0, r6
 80012c4:	f000 f8aa 	bl	800141c <LCD_WriteData>
	// Set Line Address
	LCD_WriteCommand(0x2B);
 80012c8:	202b      	movs	r0, #43	; 0x2b
 80012ca:	f000 f87f 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData((y0 >> 8) & 0xFF);
 80012ce:	0a28      	lsrs	r0, r5, #8
 80012d0:	f000 f8a4 	bl	800141c <LCD_WriteData>
	LCD_WriteData(y0 & 0xFF);
 80012d4:	b2e8      	uxtb	r0, r5
 80012d6:	f000 f8a1 	bl	800141c <LCD_WriteData>
	LCD_WriteData((y1 >> 8) & 0xFF);
 80012da:	0a20      	lsrs	r0, r4, #8
 80012dc:	f000 f89e 	bl	800141c <LCD_WriteData>
	LCD_WriteData(y1 & 0xFF);
 80012e0:	b2e0      	uxtb	r0, r4
 80012e2:	f000 f89b 	bl	800141c <LCD_WriteData>
	// Memory Write
	LCD_WriteCommand(0x2c);
 80012e6:	202c      	movs	r0, #44	; 0x2c
}
 80012e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	LCD_WriteCommand(0x2c);
 80012ec:	f000 b86e 	b.w	80013cc <LCD_WriteCommand>

080012f0 <LCD_SetColor>:

void LCD_SetColor(uint16_t c) {
	COLOR = c;
 80012f0:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <LCD_SetColor+0x8>)
 80012f2:	8018      	strh	r0, [r3, #0]
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <LCD_DrawRect_Spi>:
}

void LCD_DrawRect_Spi(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80012fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001300:	4690      	mov	r8, r2
 8001302:	461e      	mov	r6, r3
 8001304:	4607      	mov	r7, r0
 8001306:	460c      	mov	r4, r1
	LCD_SetDrawAddr(x0, y0, x1, y1);
 8001308:	f7ff ffca 	bl	80012a0 <LCD_SetDrawAddr>
	uint8_t buffer[] = {COLOR >> 8, COLOR};
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <LCD_DrawRect_Spi+0x40>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	f88d 3005 	strb.w	r3, [sp, #5]
 8001314:	0a1a      	lsrs	r2, r3, #8
 8001316:	f88d 2004 	strb.w	r2, [sp, #4]
	for(int y = y0; y <= y1; y++){
 800131a:	42b4      	cmp	r4, r6
 800131c:	dd02      	ble.n	8001324 <LCD_DrawRect_Spi+0x28>
		for(int x = x0; x <= x1; x++) {
			LCD_WriteBulkData(buffer, 2);
		}
	}
}
 800131e:	b002      	add	sp, #8
 8001320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for(int x = x0; x <= x1; x++) {
 8001324:	463d      	mov	r5, r7
 8001326:	4545      	cmp	r5, r8
 8001328:	dd01      	ble.n	800132e <LCD_DrawRect_Spi+0x32>
	for(int y = y0; y <= y1; y++){
 800132a:	3401      	adds	r4, #1
 800132c:	e7f5      	b.n	800131a <LCD_DrawRect_Spi+0x1e>
			LCD_WriteBulkData(buffer, 2);
 800132e:	2102      	movs	r1, #2
 8001330:	a801      	add	r0, sp, #4
 8001332:	f000 f99f 	bl	8001674 <LCD_WriteBulkData>
		for(int x = x0; x <= x1; x++) {
 8001336:	3501      	adds	r5, #1
 8001338:	e7f5      	b.n	8001326 <LCD_DrawRect_Spi+0x2a>
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008

08001340 <LCD_GpioInit>:

extern SPI_HandleTypeDef hspi5;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {0};

void LCD_GpioInit() {
 8001340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001344:	b089      	sub	sp, #36	; 0x24
	MX_SPI5_Init();
 8001346:	f000 fa3f 	bl	80017c8 <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <LCD_GpioInit+0x80>)
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	Gpio_InitStruct.Pull = GPIO_PULLUP;
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 800134c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80013c8 <LCD_GpioInit+0x88>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8001350:	4e1c      	ldr	r6, [pc, #112]	; (80013c4 <LCD_GpioInit+0x84>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2100      	movs	r1, #0
 8001354:	9101      	str	r1, [sp, #4]
 8001356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001358:	f042 0204 	orr.w	r2, r2, #4
 800135c:	631a      	str	r2, [r3, #48]	; 0x30
 800135e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001360:	f002 0204 	and.w	r2, r2, #4
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001368:	9102      	str	r1, [sp, #8]
 800136a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136c:	f042 0208 	orr.w	r2, r2, #8
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 8001374:	ad08      	add	r5, sp, #32
 8001376:	f04f 0904 	mov.w	r9, #4
 800137a:	f845 9d14 	str.w	r9, [r5, #-20]!
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	9302      	str	r3, [sp, #8]
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2401      	movs	r4, #1
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	9b02      	ldr	r3, [sp, #8]
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	9404      	str	r4, [sp, #16]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 800138c:	4629      	mov	r1, r5
 800138e:	4640      	mov	r0, r8
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	9306      	str	r3, [sp, #24]
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8001392:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 8001396:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 8001398:	f7ff f970 	bl	800067c <HAL_GPIO_Init>
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 800139c:	4629      	mov	r1, r5
 800139e:	4630      	mov	r0, r6
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 80013a0:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 80013a2:	f7ff f96b 	bl	800067c <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80013a6:	4622      	mov	r2, r4
 80013a8:	4649      	mov	r1, r9
 80013aa:	4640      	mov	r0, r8
 80013ac:	f7ff fa52 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 80013b0:	4622      	mov	r2, r4
 80013b2:	4639      	mov	r1, r7
 80013b4:	4630      	mov	r0, r6
 80013b6:	f7ff fa4d 	bl	8000854 <HAL_GPIO_WritePin>
}
 80013ba:	b009      	add	sp, #36	; 0x24
 80013bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40020800 	.word	0x40020800

080013cc <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 80013cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013ce:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
void LCD_WriteCommand(uint8_t data) {
 80013d2:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80013d6:	2104      	movs	r1, #4
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LCD_WriteCommand+0x44>)
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 80013da:	4d0e      	ldr	r5, [pc, #56]	; (8001414 <LCD_WriteCommand+0x48>)
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80013dc:	f7ff fa3a 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <LCD_WriteCommand+0x4c>)
 80013e8:	f7ff fa34 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 80013ec:	2301      	movs	r3, #1
 80013ee:	461a      	mov	r2, r3
 80013f0:	4621      	mov	r1, r4
 80013f2:	4628      	mov	r0, r5
 80013f4:	f7ff fe66 	bl	80010c4 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80013f8:	682a      	ldr	r2, [r5, #0]
 80013fa:	6893      	ldr	r3, [r2, #8]
 80013fc:	079b      	lsls	r3, r3, #30
 80013fe:	d5fc      	bpl.n	80013fa <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2104      	movs	r1, #4
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <LCD_WriteCommand+0x44>)
 8001406:	f7ff fa25 	bl	8000854 <HAL_GPIO_WritePin>
}
 800140a:	b003      	add	sp, #12
 800140c:	bd30      	pop	{r4, r5, pc}
 800140e:	bf00      	nop
 8001410:	40020800 	.word	0x40020800
 8001414:	20000030 	.word	0x20000030
 8001418:	40020c00 	.word	0x40020c00

0800141c <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 800141c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800141e:	ac02      	add	r4, sp, #8
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
void LCD_WriteData(uint8_t data) {
 8001422:	f804 0d01 	strb.w	r0, [r4, #-1]!
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001426:	2104      	movs	r1, #4
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LCD_WriteData+0x44>)
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 800142a:	4d0e      	ldr	r5, [pc, #56]	; (8001464 <LCD_WriteData+0x48>)
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800142c:	f7ff fa12 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001436:	480c      	ldr	r0, [pc, #48]	; (8001468 <LCD_WriteData+0x4c>)
 8001438:	f7ff fa0c 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 800143c:	2201      	movs	r2, #1
 800143e:	230a      	movs	r3, #10
 8001440:	4621      	mov	r1, r4
 8001442:	4628      	mov	r0, r5
 8001444:	f7ff fe3e 	bl	80010c4 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 8001448:	682a      	ldr	r2, [r5, #0]
 800144a:	6893      	ldr	r3, [r2, #8]
 800144c:	079b      	lsls	r3, r3, #30
 800144e:	d5fc      	bpl.n	800144a <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2104      	movs	r1, #4
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <LCD_WriteData+0x44>)
 8001456:	f7ff f9fd 	bl	8000854 <HAL_GPIO_WritePin>
}
 800145a:	b003      	add	sp, #12
 800145c:	bd30      	pop	{r4, r5, pc}
 800145e:	bf00      	nop
 8001460:	40020800 	.word	0x40020800
 8001464:	20000030 	.word	0x20000030
 8001468:	40020c00 	.word	0x40020c00

0800146c <LCD_DispInit>:
void LCD_DispInit() {
 800146c:	b508      	push	{r3, lr}
	LCD_WriteCommand(0x01);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff ffac 	bl	80013cc <LCD_WriteCommand>
	HAL_Delay(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001478:	f7ff f890 	bl	800059c <HAL_Delay>
	LCD_WriteCommand(0xCB);
 800147c:	20cb      	movs	r0, #203	; 0xcb
 800147e:	f7ff ffa5 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001482:	2039      	movs	r0, #57	; 0x39
 8001484:	f7ff ffca 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x2C);
 8001488:	202c      	movs	r0, #44	; 0x2c
 800148a:	f7ff ffc7 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x00);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ffc4 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x34);
 8001494:	2034      	movs	r0, #52	; 0x34
 8001496:	f7ff ffc1 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x02);
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff ffbe 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xCF);
 80014a0:	20cf      	movs	r0, #207	; 0xcf
 80014a2:	f7ff ff93 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ffb8 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0xC1);
 80014ac:	20c1      	movs	r0, #193	; 0xc1
 80014ae:	f7ff ffb5 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x30);
 80014b2:	2030      	movs	r0, #48	; 0x30
 80014b4:	f7ff ffb2 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xE8);
 80014b8:	20e8      	movs	r0, #232	; 0xe8
 80014ba:	f7ff ff87 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x85);
 80014be:	2085      	movs	r0, #133	; 0x85
 80014c0:	f7ff ffac 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff ffa9 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x78);
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f7ff ffa6 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xEA);
 80014d0:	20ea      	movs	r0, #234	; 0xea
 80014d2:	f7ff ff7b 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffa0 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff ff9d 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xED);
 80014e2:	20ed      	movs	r0, #237	; 0xed
 80014e4:	f7ff ff72 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x64);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f7ff ff97 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x03);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f7ff ff94 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x12);
 80014f4:	2012      	movs	r0, #18
 80014f6:	f7ff ff91 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x81);
 80014fa:	2081      	movs	r0, #129	; 0x81
 80014fc:	f7ff ff8e 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xF7);
 8001500:	20f7      	movs	r0, #247	; 0xf7
 8001502:	f7ff ff63 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001506:	2020      	movs	r0, #32
 8001508:	f7ff ff88 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xC0);
 800150c:	20c0      	movs	r0, #192	; 0xc0
 800150e:	f7ff ff5d 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x23);
 8001512:	2023      	movs	r0, #35	; 0x23
 8001514:	f7ff ff82 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xC1);
 8001518:	20c1      	movs	r0, #193	; 0xc1
 800151a:	f7ff ff57 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x10);
 800151e:	2010      	movs	r0, #16
 8001520:	f7ff ff7c 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xC5);
 8001524:	20c5      	movs	r0, #197	; 0xc5
 8001526:	f7ff ff51 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 800152a:	203e      	movs	r0, #62	; 0x3e
 800152c:	f7ff ff76 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x28);
 8001530:	2028      	movs	r0, #40	; 0x28
 8001532:	f7ff ff73 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xC7);
 8001536:	20c7      	movs	r0, #199	; 0xc7
 8001538:	f7ff ff48 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x86);
 800153c:	2086      	movs	r0, #134	; 0x86
 800153e:	f7ff ff6d 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0x36);
 8001542:	2036      	movs	r0, #54	; 0x36
 8001544:	f7ff ff42 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x48);
 8001548:	2048      	movs	r0, #72	; 0x48
 800154a:	f7ff ff67 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0x3A);
 800154e:	203a      	movs	r0, #58	; 0x3a
 8001550:	f7ff ff3c 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x55);
 8001554:	2055      	movs	r0, #85	; 0x55
 8001556:	f7ff ff61 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xB1);
 800155a:	20b1      	movs	r0, #177	; 0xb1
 800155c:	f7ff ff36 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff5b 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x18);
 8001566:	2018      	movs	r0, #24
 8001568:	f7ff ff58 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xB6);
 800156c:	20b6      	movs	r0, #182	; 0xb6
 800156e:	f7ff ff2d 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x08);
 8001572:	2008      	movs	r0, #8
 8001574:	f7ff ff52 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x82);
 8001578:	2082      	movs	r0, #130	; 0x82
 800157a:	f7ff ff4f 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x27);
 800157e:	2027      	movs	r0, #39	; 0x27
 8001580:	f7ff ff4c 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xF2);
 8001584:	20f2      	movs	r0, #242	; 0xf2
 8001586:	f7ff ff21 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff ff46 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0x26);
 8001590:	2026      	movs	r0, #38	; 0x26
 8001592:	f7ff ff1b 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff ff40 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xE0);
 800159c:	20e0      	movs	r0, #224	; 0xe0
 800159e:	f7ff ff15 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f7ff ff3a 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x31);
 80015a8:	2031      	movs	r0, #49	; 0x31
 80015aa:	f7ff ff37 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x2B);
 80015ae:	202b      	movs	r0, #43	; 0x2b
 80015b0:	f7ff ff34 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0C);
 80015b4:	200c      	movs	r0, #12
 80015b6:	f7ff ff31 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0E);
 80015ba:	200e      	movs	r0, #14
 80015bc:	f7ff ff2e 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x08);
 80015c0:	2008      	movs	r0, #8
 80015c2:	f7ff ff2b 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x4E);
 80015c6:	204e      	movs	r0, #78	; 0x4e
 80015c8:	f7ff ff28 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0xF1);
 80015cc:	20f1      	movs	r0, #241	; 0xf1
 80015ce:	f7ff ff25 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x37);
 80015d2:	2037      	movs	r0, #55	; 0x37
 80015d4:	f7ff ff22 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x07);
 80015d8:	2007      	movs	r0, #7
 80015da:	f7ff ff1f 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x10);
 80015de:	2010      	movs	r0, #16
 80015e0:	f7ff ff1c 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x03);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f7ff ff19 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0E);
 80015ea:	200e      	movs	r0, #14
 80015ec:	f7ff ff16 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x09);
 80015f0:	2009      	movs	r0, #9
 80015f2:	f7ff ff13 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x00);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff ff10 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0xE1);
 80015fc:	20e1      	movs	r0, #225	; 0xe1
 80015fe:	f7ff fee5 	bl	80013cc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff0a 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001608:	200e      	movs	r0, #14
 800160a:	f7ff ff07 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x14);
 800160e:	2014      	movs	r0, #20
 8001610:	f7ff ff04 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x03);
 8001614:	2003      	movs	r0, #3
 8001616:	f7ff ff01 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x11);
 800161a:	2011      	movs	r0, #17
 800161c:	f7ff fefe 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x07);
 8001620:	2007      	movs	r0, #7
 8001622:	f7ff fefb 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x31);
 8001626:	2031      	movs	r0, #49	; 0x31
 8001628:	f7ff fef8 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0xC1);
 800162c:	20c1      	movs	r0, #193	; 0xc1
 800162e:	f7ff fef5 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x48);
 8001632:	2048      	movs	r0, #72	; 0x48
 8001634:	f7ff fef2 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x08);
 8001638:	2008      	movs	r0, #8
 800163a:	f7ff feef 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0F);
 800163e:	200f      	movs	r0, #15
 8001640:	f7ff feec 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0C);
 8001644:	200c      	movs	r0, #12
 8001646:	f7ff fee9 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x31);
 800164a:	2031      	movs	r0, #49	; 0x31
 800164c:	f7ff fee6 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x36);
 8001650:	2036      	movs	r0, #54	; 0x36
 8001652:	f7ff fee3 	bl	800141c <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001656:	200f      	movs	r0, #15
 8001658:	f7ff fee0 	bl	800141c <LCD_WriteData>
	LCD_WriteCommand(0x11);
 800165c:	2011      	movs	r0, #17
 800165e:	f7ff feb5 	bl	80013cc <LCD_WriteCommand>
	HAL_Delay(120);
 8001662:	2078      	movs	r0, #120	; 0x78
 8001664:	f7fe ff9a 	bl	800059c <HAL_Delay>
	LCD_WriteCommand(0x29);
 8001668:	2029      	movs	r0, #41	; 0x29
}
 800166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_WriteCommand(0x29);
 800166e:	f7ff bead 	b.w	80013cc <LCD_WriteCommand>
	...

08001674 <LCD_WriteBulkData>:

void LCD_WriteBulkData(uint8_t *data, uint8_t size) {
 8001674:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
void LCD_WriteBulkData(uint8_t *data, uint8_t size) {
 8001678:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800167a:	2104      	movs	r1, #4
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <LCD_WriteBulkData+0x40>)
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
 800167e:	4c0e      	ldr	r4, [pc, #56]	; (80016b8 <LCD_WriteBulkData+0x44>)
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001680:	f7ff f8e8 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <LCD_WriteBulkData+0x48>)
 800168c:	f7ff f8e2 	bl	8000854 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
 8001690:	2202      	movs	r2, #2
 8001692:	230a      	movs	r3, #10
 8001694:	4629      	mov	r1, r5
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fd14 	bl	80010c4 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	6893      	ldr	r3, [r2, #8]
 80016a0:	079b      	lsls	r3, r3, #30
 80016a2:	d5fc      	bpl.n	800169e <LCD_WriteBulkData+0x2a>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2104      	movs	r1, #4
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <LCD_WriteBulkData+0x40>)
}
 80016aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80016ae:	f7ff b8d1 	b.w	8000854 <HAL_GPIO_WritePin>
 80016b2:	bf00      	nop
 80016b4:	40020800 	.word	0x40020800
 80016b8:	20000030 	.word	0x20000030
 80016bc:	40020c00 	.word	0x40020c00

080016c0 <SystemClock_Config>:
	  HAL_Delay(1);
  }
}

void SystemClock_Config(void)
{
 80016c0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	2430      	movs	r4, #48	; 0x30
{
 80016c4:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	4622      	mov	r2, r4
 80016c8:	2100      	movs	r1, #0
 80016ca:	a808      	add	r0, sp, #32
 80016cc:	f000 f96e 	bl	80019ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	2214      	movs	r2, #20
 80016d2:	2100      	movs	r1, #0
 80016d4:	a803      	add	r0, sp, #12
 80016d6:	f000 f969 	bl	80019ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016da:	2100      	movs	r1, #0
 80016dc:	4622      	mov	r2, r4
 80016de:	a814      	add	r0, sp, #80	; 0x50
 80016e0:	f000 f964 	bl	80019ac <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	2500      	movs	r5, #0
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <SystemClock_Config+0xb0>)
 80016e8:	9501      	str	r5, [sp, #4]
 80016ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016fe:	9502      	str	r5, [sp, #8]
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800170e:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	2310      	movs	r3, #16
 800171e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001720:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001722:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001724:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001726:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172a:	2304      	movs	r3, #4
 800172c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800172e:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001732:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001734:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f7ff f8cf 	bl	80008d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800173a:	f7ff f891 	bl	8000860 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173e:	230f      	movs	r3, #15
 8001740:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001746:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001750:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001752:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001754:	f7ff fa70 	bl	8000c38 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 56;
 8001758:	2338      	movs	r3, #56	; 0x38
 800175a:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800175e:	2307      	movs	r3, #7
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001760:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001762:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001764:	951d      	str	r5, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	f7ff fb01 	bl	8000d6c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800176a:	b020      	add	sp, #128	; 0x80
 800176c:	bd70      	pop	{r4, r5, r6, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000

08001778 <main>:
{
 8001778:	b508      	push	{r3, lr}
  HAL_Init();
 800177a:	f7fe fee3 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 800177e:	f7ff ff9f 	bl	80016c0 <SystemClock_Config>
  MX_GPIO_Init();
 8001782:	f7ff fd49 	bl	8001218 <MX_GPIO_Init>
  LCD_GpioInit();
 8001786:	f7ff fddb 	bl	8001340 <LCD_GpioInit>
  LCD_DispInit();
 800178a:	f7ff fe6f 	bl	800146c <LCD_DispInit>
	  LCD_SetColor(0x2E5A);
 800178e:	f642 605a 	movw	r0, #11866	; 0x2e5a
 8001792:	f7ff fdad 	bl	80012f0 <LCD_SetColor>
	  LCD_DrawRect_Spi(100, 10, 120, 30);
 8001796:	231e      	movs	r3, #30
 8001798:	2278      	movs	r2, #120	; 0x78
 800179a:	210a      	movs	r1, #10
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f7ff fdad 	bl	80012fc <LCD_DrawRect_Spi>
	  HAL_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7fe fefa 	bl	800059c <HAL_Delay>
	  LCD_SetColor(0xDE04);
 80017a8:	f64d 6004 	movw	r0, #56836	; 0xde04
 80017ac:	f7ff fda0 	bl	80012f0 <LCD_SetColor>
	  LCD_DrawRect_Spi(100, 10, 120, 30);
 80017b0:	231e      	movs	r3, #30
 80017b2:	2278      	movs	r2, #120	; 0x78
 80017b4:	210a      	movs	r1, #10
 80017b6:	2064      	movs	r0, #100	; 0x64
 80017b8:	f7ff fda0 	bl	80012fc <LCD_DrawRect_Spi>
	  HAL_Delay(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7fe feed 	bl	800059c <HAL_Delay>
 80017c2:	e7e4      	b.n	800178e <main+0x16>

080017c4 <Error_Handler>:

void Error_Handler(void)
{
 80017c4:	4770      	bx	lr
	...

080017c8 <MX_SPI5_Init>:

/* SPI5 init function */
void MX_SPI5_Init(void)
{

  hspi5.Instance = SPI5;
 80017c8:	480e      	ldr	r0, [pc, #56]	; (8001804 <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <MX_SPI5_Init+0x40>)
{
 80017cc:	b508      	push	{r3, lr}
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80017ce:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
 80017d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80017d6:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017da:	2300      	movs	r3, #0
 80017dc:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017de:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e6:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ea:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ec:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80017ee:	230a      	movs	r3, #10
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017f0:	6182      	str	r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 80017f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80017f4:	f7ff fc29 	bl	800104a <HAL_SPI_Init>
 80017f8:	b118      	cbz	r0, 8001802 <MX_SPI5_Init+0x3a>
  {
    Error_Handler();
  }

}
 80017fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017fe:	f7ff bfe1 	b.w	80017c4 <Error_Handler>
 8001802:	bd08      	pop	{r3, pc}
 8001804:	20000030 	.word	0x20000030
 8001808:	40015000 	.word	0x40015000

0800180c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	4604      	mov	r4, r0
 8001810:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	2214      	movs	r2, #20
 8001814:	2100      	movs	r1, #0
 8001816:	a803      	add	r0, sp, #12
 8001818:	f000 f8c8 	bl	80019ac <memset>
  if(spiHandle->Instance==SPI5)
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_SPI_MspInit+0x64>)
 8001820:	429a      	cmp	r2, r3
 8001822:	d123      	bne.n	800186c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001824:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001828:	2100      	movs	r1, #0
 800182a:	9101      	str	r1, [sp, #4]
 800182c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182e:	4811      	ldr	r0, [pc, #68]	; (8001874 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001830:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
 8001836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001838:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001840:	9102      	str	r1, [sp, #8]
 8001842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001854:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001858:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001862:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001864:	2305      	movs	r3, #5
 8001866:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001868:	f7fe ff08 	bl	800067c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800186c:	b008      	add	sp, #32
 800186e:	bd10      	pop	{r4, pc}
 8001870:	40015000 	.word	0x40015000
 8001874:	40021400 	.word	0x40021400

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_MspInit+0x34>)
 800187c:	2100      	movs	r1, #0
 800187e:	9100      	str	r1, [sp, #0]
 8001880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001886:	645a      	str	r2, [r3, #68]	; 0x44
 8001888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800188a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	9101      	str	r1, [sp, #4]
 8001894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001896:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	b002      	add	sp, #8
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <NMI_Handler>:
 80018b0:	4770      	bx	lr

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler>

080018ba <SVC_Handler>:
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f7fe be5a 	b.w	8000578 <HAL_IncTick>

080018c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	490f      	ldr	r1, [pc, #60]	; (8001904 <SystemInit+0x40>)
 80018c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <SystemInit+0x44>)
 80018d4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80018d8:	f042 0201 	orr.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80018de:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <SystemInit+0x48>)
 80018ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018f8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018fe:	608b      	str	r3, [r1, #8]
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00
 8001908:	40023800 	.word	0x40023800
 800190c:	24003010 	.word	0x24003010

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001916:	e003      	b.n	8001920 <LoopCopyDataInit>

08001918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800191a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800191c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800191e:	3104      	adds	r1, #4

08001920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001928:	d3f6      	bcc.n	8001918 <CopyDataInit>
  ldr  r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800192c:	e002      	b.n	8001934 <LoopFillZerobss>

0800192e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800192e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001930:	f842 3b04 	str.w	r3, [r2], #4

08001934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001938:	d3f9      	bcc.n	800192e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193a:	f7ff ffc3 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f000 f811 	bl	8001964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7ff ff19 	bl	8001778 <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001948:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800194c:	080019f4 	.word	0x080019f4
  ldr  r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001954:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001958:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800195c:	20000088 	.word	0x20000088

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>
	...

08001964 <__libc_init_array>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	4e0d      	ldr	r6, [pc, #52]	; (800199c <__libc_init_array+0x38>)
 8001968:	4c0d      	ldr	r4, [pc, #52]	; (80019a0 <__libc_init_array+0x3c>)
 800196a:	1ba4      	subs	r4, r4, r6
 800196c:	10a4      	asrs	r4, r4, #2
 800196e:	2500      	movs	r5, #0
 8001970:	42a5      	cmp	r5, r4
 8001972:	d109      	bne.n	8001988 <__libc_init_array+0x24>
 8001974:	4e0b      	ldr	r6, [pc, #44]	; (80019a4 <__libc_init_array+0x40>)
 8001976:	4c0c      	ldr	r4, [pc, #48]	; (80019a8 <__libc_init_array+0x44>)
 8001978:	f000 f820 	bl	80019bc <_init>
 800197c:	1ba4      	subs	r4, r4, r6
 800197e:	10a4      	asrs	r4, r4, #2
 8001980:	2500      	movs	r5, #0
 8001982:	42a5      	cmp	r5, r4
 8001984:	d105      	bne.n	8001992 <__libc_init_array+0x2e>
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800198c:	4798      	blx	r3
 800198e:	3501      	adds	r5, #1
 8001990:	e7ee      	b.n	8001970 <__libc_init_array+0xc>
 8001992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001996:	4798      	blx	r3
 8001998:	3501      	adds	r5, #1
 800199a:	e7f2      	b.n	8001982 <__libc_init_array+0x1e>
 800199c:	080019ec 	.word	0x080019ec
 80019a0:	080019ec 	.word	0x080019ec
 80019a4:	080019ec 	.word	0x080019ec
 80019a8:	080019f0 	.word	0x080019f0

080019ac <memset>:
 80019ac:	4402      	add	r2, r0
 80019ae:	4603      	mov	r3, r0
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d100      	bne.n	80019b6 <memset+0xa>
 80019b4:	4770      	bx	lr
 80019b6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ba:	e7f9      	b.n	80019b0 <memset+0x4>

080019bc <_init>:
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	bf00      	nop
 80019c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c2:	bc08      	pop	{r3}
 80019c4:	469e      	mov	lr, r3
 80019c6:	4770      	bx	lr

080019c8 <_fini>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	bf00      	nop
 80019cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ce:	bc08      	pop	{r3}
 80019d0:	469e      	mov	lr, r3
 80019d2:	4770      	bx	lr
